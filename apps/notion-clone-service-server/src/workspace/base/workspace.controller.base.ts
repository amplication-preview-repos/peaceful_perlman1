/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { WorkspaceService } from "../workspace.service";
import { WorkspaceCreateInput } from "./WorkspaceCreateInput";
import { Workspace } from "./Workspace";
import { WorkspaceFindManyArgs } from "./WorkspaceFindManyArgs";
import { WorkspaceWhereUniqueInput } from "./WorkspaceWhereUniqueInput";
import { WorkspaceUpdateInput } from "./WorkspaceUpdateInput";
import { PageFindManyArgs } from "../../page/base/PageFindManyArgs";
import { Page } from "../../page/base/Page";
import { PageWhereUniqueInput } from "../../page/base/PageWhereUniqueInput";

export class WorkspaceControllerBase {
  constructor(protected readonly service: WorkspaceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Workspace })
  async createWorkspace(
    @common.Body() data: WorkspaceCreateInput
  ): Promise<Workspace> {
    return await this.service.createWorkspace({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,
        owner: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Workspace] })
  @ApiNestedQuery(WorkspaceFindManyArgs)
  async workspaces(@common.Req() request: Request): Promise<Workspace[]> {
    const args = plainToClass(WorkspaceFindManyArgs, request.query);
    return this.service.workspaces({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,
        owner: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Workspace })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async workspace(
    @common.Param() params: WorkspaceWhereUniqueInput
  ): Promise<Workspace | null> {
    const result = await this.service.workspace({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,
        owner: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Workspace })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateWorkspace(
    @common.Param() params: WorkspaceWhereUniqueInput,
    @common.Body() data: WorkspaceUpdateInput
  ): Promise<Workspace | null> {
    try {
      return await this.service.updateWorkspace({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          description: true,
          owner: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Workspace })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteWorkspace(
    @common.Param() params: WorkspaceWhereUniqueInput
  ): Promise<Workspace | null> {
    try {
      return await this.service.deleteWorkspace({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          description: true,
          owner: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/pages")
  @ApiNestedQuery(PageFindManyArgs)
  async findPages(
    @common.Req() request: Request,
    @common.Param() params: WorkspaceWhereUniqueInput
  ): Promise<Page[]> {
    const query = plainToClass(PageFindManyArgs, request.query);
    const results = await this.service.findPages(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        content: true,

        workspace: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/pages")
  async connectPages(
    @common.Param() params: WorkspaceWhereUniqueInput,
    @common.Body() body: PageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pages: {
        connect: body,
      },
    };
    await this.service.updateWorkspace({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/pages")
  async updatePages(
    @common.Param() params: WorkspaceWhereUniqueInput,
    @common.Body() body: PageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pages: {
        set: body,
      },
    };
    await this.service.updateWorkspace({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/pages")
  async disconnectPages(
    @common.Param() params: WorkspaceWhereUniqueInput,
    @common.Body() body: PageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pages: {
        disconnect: body,
      },
    };
    await this.service.updateWorkspace({
      where: params,
      data,
      select: { id: true },
    });
  }
}
